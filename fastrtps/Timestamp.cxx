// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Timestamp.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Timestamp.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msgs::idl::Timestamp::Timestamp()
{
    m_sec = 0;
    m_ns = 0;

}

idl_msgs::idl::Timestamp::~Timestamp()
{


}

idl_msgs::idl::Timestamp::Timestamp(const Timestamp &x)
{
    m_sec = x.m_sec;
    m_ns = x.m_ns;
}

idl_msgs::idl::Timestamp::Timestamp(Timestamp &&x)
{
    m_sec = x.m_sec;
    m_ns = x.m_ns;
}

idl_msgs::idl::Timestamp& idl_msgs::idl::Timestamp::operator=(const Timestamp &x)
{

    m_sec = x.m_sec;
    m_ns = x.m_ns;

    return *this;
}

idl_msgs::idl::Timestamp& idl_msgs::idl::Timestamp::operator=(Timestamp &&x)
{

    m_sec = x.m_sec;
    m_ns = x.m_ns;

    return *this;
}

size_t idl_msgs::idl::Timestamp::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t idl_msgs::idl::Timestamp::getCdrSerializedSize(const idl_msgs::idl::Timestamp& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void idl_msgs::idl::Timestamp::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_sec;
    scdr << m_ns;
}

void idl_msgs::idl::Timestamp::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_sec;
    dcdr >> m_ns;
}

/*!
 * @brief This function sets a value in member sec
 * @param _sec New value for member sec
 */
void idl_msgs::idl::Timestamp::sec(int64_t _sec)
{
m_sec = _sec;
}

/*!
 * @brief This function returns the value of member sec
 * @return Value of member sec
 */
int64_t idl_msgs::idl::Timestamp::sec() const
{
    return m_sec;
}

/*!
 * @brief This function returns a reference to member sec
 * @return Reference to member sec
 */
int64_t& idl_msgs::idl::Timestamp::sec()
{
    return m_sec;
}
/*!
 * @brief This function sets a value in member ns
 * @param _ns New value for member ns
 */
void idl_msgs::idl::Timestamp::ns(int32_t _ns)
{
m_ns = _ns;
}

/*!
 * @brief This function returns the value of member ns
 * @return Value of member ns
 */
int32_t idl_msgs::idl::Timestamp::ns() const
{
    return m_ns;
}

/*!
 * @brief This function returns a reference to member ns
 * @return Reference to member ns
 */
int32_t& idl_msgs::idl::Timestamp::ns()
{
    return m_ns;
}

size_t idl_msgs::idl::Timestamp::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;





    return current_align;
}

bool idl_msgs::idl::Timestamp::isKeyDefined()
{
   return false;
}

void idl_msgs::idl::Timestamp::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}


