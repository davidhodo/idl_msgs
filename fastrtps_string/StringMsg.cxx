// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file StringMsg.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "StringMsg.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

idl_msgs::idl::StringMsg::StringMsg()
{

}

idl_msgs::idl::StringMsg::~StringMsg()
{
}

idl_msgs::idl::StringMsg::StringMsg(const StringMsg &x)
{
    m_var_string = x.m_var_string;
}

idl_msgs::idl::StringMsg::StringMsg(StringMsg &&x)
{
    m_var_string = std::move(x.m_var_string);
}

idl_msgs::idl::StringMsg& idl_msgs::idl::StringMsg::operator=(const StringMsg &x)
{

    m_var_string = x.m_var_string;

    return *this;
}

idl_msgs::idl::StringMsg& idl_msgs::idl::StringMsg::operator=(StringMsg &&x)
{

    m_var_string = std::move(x.m_var_string);

    return *this;
}

size_t idl_msgs::idl::StringMsg::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t idl_msgs::idl::StringMsg::getCdrSerializedSize(const idl_msgs::idl::StringMsg& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.var_string().size() + 1;

    return current_alignment - initial_alignment;
}

void idl_msgs::idl::StringMsg::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_var_string;
}

void idl_msgs::idl::StringMsg::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_var_string;
}

/*!
 * @brief This function copies the value in member var_string
 * @param _var_string New value to be copied in member var_string
 */
void idl_msgs::idl::StringMsg::var_string(const std::string &_var_string)
{
m_var_string = _var_string;
}

/*!
 * @brief This function moves the value in member var_string
 * @param _var_string New value to be moved in member var_string
 */
void idl_msgs::idl::StringMsg::var_string(std::string &&_var_string)
{
m_var_string = std::move(_var_string);
}

/*!
 * @brief This function returns a constant reference to member var_string
 * @return Constant reference to member var_string
 */
const std::string& idl_msgs::idl::StringMsg::var_string() const
{
    return m_var_string;
}

/*!
 * @brief This function returns a reference to member var_string
 * @return Reference to member var_string
 */
std::string& idl_msgs::idl::StringMsg::var_string()
{
    return m_var_string;
}

size_t idl_msgs::idl::StringMsg::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;



    return current_align;
}

bool idl_msgs::idl::StringMsg::isKeyDefined()
{
   return false;
}

void idl_msgs::idl::StringMsg::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
}


